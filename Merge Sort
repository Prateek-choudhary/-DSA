#include<bits/stdc++.h>
using namespace std;
void merge(vector<int>&arr,int low,int mid,int high)
{
 vector<int>temp;
 int left=low;
 int right=mid+1;
 while(left<=mid && right<=high) //under this loop sorting process will be managed.
{
  if(arr[left]<=arr[right]){
  temp.push_back(arr[left]);
  left++;
}
else
{ temp.push_back(arr[right]);
right++;
}
}
 while(left<=mid)        //it is loop after exhausting right array if some element left in left array it will push them into temporary sorted array.
{
 temp.push_back(arr[left]);
 left++;
}
while(right<=high)     //same as for right array if any element left in right array it will push them into temporary array.
{
 temp.push_back(arr[right]);
 right++;
}

for(int i=low;i<=high;i++) //it is for sending temporary array elementts to original array.
{
 arr[i]=temp[i-low];
}
}
void merge_sort(vector<int>&arr,int low,int high)
{
 if(low>=high)return;
int mid=(low+high)/2;
merge_sort(arr,low,mid); //deviding array low to mid
merge_sort(arr,mid+1,high); //dividing array more than mid to high
merge(arr,low,mid,high); //combining both arrays after sorting
}

int main()
{
vector<int>arr={9,4,7,6,3,1,5};
int n=arr.size();
cout<<"Array before sorted";
for(int i=0;i<n;i++)
{
cout<<arr[i]<<" ";
}
merge_sort(arr,0,n-1);
cout<<"\nArry after sorted:";
for(int i=0;i<n;i++)
{
cout<<arr[i]<<" ";}
return 0;
}
